function find_pose
global object_points;
global A1;
global A2;
global A3;
global A4;
global Tcw1;
global Tcw2;
global Tcw3;
global Tcw4;
global Rcw1;
global Rcw2;
global Rcw3;
global Rcw4;
global measured;

red_blob = [-144;255;0];    % x;y;z position in mm w.r.t. body
green_blob = [-130;-265;0];
blue_blob = [315;0;0];
object_points = [red_blob, green_blob, blue_blob];

fd_client1 = fopen('Data_ekf8/image_data_client1_2014-06-07_15-47.txt');
fd_client2 = fopen('Data_ekf8/image_data_client2_2014-06-07_15-47.txt');
fd_client3 = fopen('Data_ekf8/image_data_client3_2014-06-07_15-47.txt');
fd_client4 = fopen('Data_ekf8/image_data_client4_2014-06-07_15-47.txt');   

[fx1,fy1,cx1,cy1,Rcw1,Tcw1] = extract_camera_param(fd_client1);
[fx2,fy2,cx2,cy2,Rcw2,Tcw2] = extract_camera_param(fd_client2);
[fx3,fy3,cx3,cy3,Rcw3,Tcw3] = extract_camera_param(fd_client3);
[fx4,fy4,cx4,cy4,Rcw4,Tcw4] = extract_camera_param(fd_client4);
A_intrinsic_1 = [fx1 0 cx1; 0 fy1 cy1;0 0 1];
A_intrinsic_2 = [fx2 0 cx2; 0 fy2 cy2;0 0 1];
A_intrinsic_3 = [fx3 0 cx3; 0 fy3 cy3;0 0 1];
A_intrinsic_4 = [fx4 0 cx4; 0 fy4 cy4;0 0 1];
cam_param_1 = camera_parameters_store(A_intrinsic_1,Rcw1,Tcw1);
cam_param_2 = camera_parameters_store(A_intrinsic_2,Rcw2,Tcw2);
cam_param_3 = camera_parameters_store(A_intrinsic_3,Rcw3,Tcw3);
cam_param_4 = camera_parameters_store(A_intrinsic_4,Rcw4,Tcw4);

% load  first line of data
[tl1,tl2,tl3,tl4] = getlines(fd_client1,fd_client2,fd_client3,fd_client4);
s1 = extract_image_data(tl1,cam_param_1);
s2 = extract_image_data(tl2,cam_param_2);
s3 = extract_image_data(tl3,cam_param_3);
s4 = extract_image_data(tl4,cam_param_4);
z = [s1,s2,s3,s4];

A1 = A_intrinsic_1*1000; % convert mapping from pixel/mm to pixel/m
A2 = A_intrinsic_2*1000; 
A3 = A_intrinsic_3*1000; 
A4 = A_intrinsic_4*1000; 
Tcw1 = Tcw1/1000; % convert mapping from pixel/mm to pixel/m
Tcw2 = Tcw2/1000;
Tcw3 = Tcw3/1000;
Tcw4 = Tcw4/1000;

cam1_red_meas = [s1.red_data(1,1);s1.red_data(1,2)];
cam1_green_meas = [s1.green_data(1,1);s1.green_data(1,2)];
cam1_blue_meas = [s1.blue_data(1,1);s1.blue_data(1,2)];
cam2_red_meas = [s2.red_data(1,1);s2.red_data(1,2)];
cam2_green_meas = [s2.green_data(1,1);s2.green_data(1,2)];
cam2_blue_meas = [s2.blue_data(1,1);s2.blue_data(1,2)];
cam3_red_meas = [s3.red_data(1,1);s3.red_data(1,2)];
cam3_green_meas = [s3.green_data(1,1);s3.green_data(1,2)];
cam3_blue_meas = [s3.blue_data(1,1);s3.blue_data(1,2)];
cam4_red_meas = [s4.red_data(1,1);s4.red_data(1,2)];
cam4_green_meas = [s4.green_data(1,1);s4.green_data(1,2)];
cam4_blue_meas = [s4.blue_data(1,1);s4.blue_data(1,2)];
measured = [cam1_red_meas;cam1_green_meas;cam1_blue_meas;
    cam2_red_meas;cam2_green_meas;cam2_blue_meas;
    cam3_red_meas;cam3_green_meas;cam3_blue_meas;
    cam4_red_meas;cam4_green_meas;cam4_blue_meas];


x0 = [0;0;0;0;0;0;0;0;0;]; % initial guess

[x,resnorm] = lsqnonlin(@pixelError,x0);
for i = 1:1000
    % load next line
    [tl1,tl2,tl3,tl4] = getlines(fd_client1,fd_client2,fd_client3,fd_client4);
    s1 = extract_image_data(tl1,cam_param_1);
    s2 = extract_image_data(tl2,cam_param_2);
    s3 = extract_image_data(tl3,cam_param_3);
    s4 = extract_image_data(tl4,cam_param_4);
    
    if (s1.number_red == 0)
        cam1_red_meas = [-1;-1];
    else
        cam1_red_meas = [s1.red_data(1,1);s1.red_data(1,2)];
    end
    if (s1.number_green == 0)
        cam1_green_meas = [-1;-1];
    else
        cam1_green_meas = [s1.green_data(1,1);s1.green_data(1,2)];
    end
    if (s1.number_blue == 0)
        cam1_blue_meas = [-1;-1];
    else
        cam1_blue_meas = [s1.blue_data(1,1);s1.blue_data(1,2)];
    end
    
    if (s2.number_red == 0)
        cam2_red_meas = [-1;-1];
    else
        cam2_red_meas = [s2.red_data(1,1);s2.red_data(1,2)];
    end
    if (s2.number_green == 0)
        cam2_green_meas = [-1;-1];
    else
        cam2_green_meas = [s2.green_data(1,1);s2.green_data(1,2)];
    end
    if (s2.number_blue == 0)
        cam2_blue_meas = [-1;-1];
    else
        cam2_blue_meas = [s2.blue_data(1,1);s2.blue_data(1,2)];
    end    
    
    if (s3.number_red == 0)
        cam3_red_meas = [-1;-1];
    else
        cam3_red_meas = [s3.red_data(1,1);s3.red_data(1,2)];
    end
    if (s3.number_green == 0)
        cam3_green_meas = [-1;-1];
    else
        cam3_green_meas = [s3.green_data(1,1);s3.green_data(1,2)];
    end
    if (s3.number_blue == 0)
        cam3_blue_meas = [-1;-1];
    else
        cam3_blue_meas = [s3.blue_data(1,1);s3.blue_data(1,2)];
    end    
        
    if (s4.number_red == 0)
        cam4_red_meas = [-1;-1];
    else
        cam4_red_meas = [s4.red_data(1,1);s4.red_data(1,2)];
    end
    if (s4.number_green == 0)
        cam4_green_meas = [-1;-1];
    else
        cam4_green_meas = [s4.green_data(1,1);s4.green_data(1,2)];
    end
    if (s4.number_blue == 0)
        cam4_blue_meas = [-1;-1];
    else
        cam4_blue_meas = [s4.blue_data(1,1);s4.blue_data(1,2)];
    end    
    
    measured = [cam1_red_meas;cam1_green_meas;cam1_blue_meas;
        cam2_red_meas;cam2_green_meas;cam2_blue_meas;
        cam3_red_meas;cam3_green_meas;cam3_blue_meas;
        cam4_red_meas;cam4_green_meas;cam4_blue_meas];
    
    [x,resnorm] = lsqnonlin(@pixelError,x);
    out(:,i) = x;
end
plot(out');

end

function y = pixelError(x)
    global A1;
    global A2;
    global A3;
    global A4;
    global Tcw1;
    global Tcw2;
    global Tcw3;
    global Tcw4;
    global Rcw1;
    global Rcw2;
    global Rcw3;
    global Rcw4;    
    global measured;
    
    Twp = x(1:9);
    cam1_red = project2_2D(A1,Rcw1,Tcw1,Twp);
    cam1_green = project2_2D(A1,Rcw1,Tcw1,Twp);
    cam1_blue = project2_2D(A1,Rcw1,Tcw1,Twp);
    cam2_red = project2_2D(A2,Rcw2,Tcw2,Twp);
    cam2_green = project2_2D(A2,Rcw2,Tcw2,Twp);
    cam2_blue = project2_2D(A2,Rcw2,Tcw2,Twp);
    cam3_red = project2_2D(A3,Rcw3,Tcw3,Twp);
    cam3_green = project2_2D(A3,Rcw3,Tcw3,Twp);
    cam3_blue = project2_2D(A3,Rcw3,Tcw3,Twp);
    cam4_red = project2_2D(A4,Rcw4,Tcw4,Twp);
    cam4_green = project2_2D(A4,Rcw4,Tcw4,Twp);
    cam4_blue = project2_2D(A4,Rcw4,Tcw4,Twp);    
    
    estimated = [cam1_red;cam1_green;cam1_blue;
    cam2_red;cam2_green;cam2_blue;
    cam3_red;cam3_green;cam3_blue;
    cam4_red;cam4_green;cam4_blue];

    y = measured - estimated;
    
    n = length(y);
    for i = 1:n
        if (measured == -1)
            y(i) = [];
            n = n - 1;
            i = i - 1;
        end
    end
end

function x = solvePose(x0,z,object_points)
    x(:,1) = x0;
    for i = 1:15
        [x_est,norm_err] = solvePoseEst(x(:,i),z,object_points)   
        x(:,i+1) = x_est;
    end
end

function[x, norm_err,delta_x_plus_x] = solveLSQ(A,b,x0)
    x = (A'*A)^-1*A'*b;
    % show the sum of the squares of the pixel error 
    norm_err = sum(b.^2);
    delta_x_plus_x = x + x0;
end

function [x_est,resnorm] = solvePoseEst(x,z,object_points)    
    num_measurements = 0;
    % only allow single blob detection for now
    for i = 1:4
        if (z(i).number_red == 1)
            num_measurements = num_measurements + 2;
        end
        if (z(i).number_green == 1)
            num_measurements = num_measurements + 2;
        end
        if (z(i).number_blue == 1)
            num_measurements = num_measurements + 2;
        end        
    end
    
    A_lin = zeros(num_measurements,7);    
    b_lin = zeros(num_measurements,1);
    
    z_est = zeros(num_measurements,1);
    z_meas = zeros(num_measurements,1);    
    
    Twp = x(1:3);
    qwp = x(4:7);
    k = 1;
    for i = 1:4
        A = z(1,i).cam_param.intrinsic_mat*1000; % convert mapping from pixel/mm to pixel/m
        Rcw = z(1,i).cam_param.rotation_w2c;
        Tcw = z(1,i).cam_param.translation_w2c/1000; % convert mapping from pixel/mm to pixel/m
        % red blobs
        if (z(1,i).number_red == 1)
            % do measurement estimation
            u = project2_2D(A,Rcw,Tcw,Twp,qwp,object_points(:,1)/1000);
            z_est(k:k+1,1) = u;            
            
            % do jacobian calculation
            K = A*Rcw;
            X = object_points(1,1)/1000;
            Y = object_points(2,1)/1000;
            Z = object_points(3,1)/1000;
            
            % calculate B's
            B1 = (qwp(1)^2+qwp(2)^2-qwp(3)^2-qwp(4)^2)*X + ...
                + 2*(qwp(2)*qwp(3) - qwp(1)*qwp(4))*Y + ...
                + 2*(qwp(2)*qwp(4) + qwp(1)*qwp(3))*Z + ...
                + Twp(1) - z(1,i).cam_param.translation_w2c(1)/1000; % convert mapping from pixel/mm to pixel/m
            B2 = 2*(qwp(2)*qwp(3) + qwp(1)*qwp(4))*X + ...
                + (qwp(1)^2-qwp(2)^2+qwp(3)^2-qwp(4)^2)*Y + ...
                + 2*(qwp(3)*qwp(4) - qwp(1)*qwp(2))*Z + ...
                + Twp(2) - z(1,i).cam_param.translation_w2c(2)/1000; % convert mapping from pixel/mm to pixel/m
            B3 = 2*(qwp(2)*qwp(4) - qwp(1)*qwp(3))*X + ...
                + 2*(qwp(3)*qwp(4) + qwp(1)*qwp(2))*Y + ...
                + (qwp(1)^2-qwp(2)^2-qwp(3)^2+qwp(4)^2)*Z + ...
                + Twp(3) - z(1,i).cam_param.translation_w2c(3)/1000; % convert mapping from pixel/mm to pixel/m            
            
            b = K(3,1)*B1 + K(3,2)*B2 + K(3,3)*B3;
            bu = b;
            bv = b;
            au = K(1,1)*B1 + K(1,2)*B2 + K(1,3)*B3;
            av = K(2,1)*B1 + K(2,2)*B2 + K(2,3)*B3;
            
            dB1_q = [2*(qwp(1)*X - qwp(4)*Y + qwp(3)*Z),2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z),...
                    2*(-qwp(3)*X + qwp(2)*Y + qwp(1)*Z),2*(-qwp(4)*X - qwp(1)*Y + qwp(2)*Z)];
                
            dB2_q = [2*(qwp(4)*X + qwp(1)*Y - qwp(2)*Z),2*(qwp(3)*X - qwp(2)*Y - qwp(1)*Z),...
                    2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z),2*(qwp(1)*X - qwp(4)*Y + qwp(3)*Z)];
                
            dB3_q = [2*(-qwp(3)*X + qwp(2)*Y + qwp(1)*Z),2*(qwp(4)*X + qwp(1)*Y - qwp(2)*Z),...
                    2*(-qwp(1)*X + qwp(4)*Y - qwp(3)*Z),2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z)];
                
            dB1_x = [1 0 0 dB1_q];
            dB2_x = [0 1 0 dB2_q];
            dB3_x = [0 0 1 dB3_q];
            
            au_prime = K(1,1)*dB1_x + K(1,2)*dB2_x + K(1,3)*dB3_x;
            av_prime = K(2,1)*dB1_x + K(2,2)*dB2_x + K(2,3)*dB3_x;
            b_prime = K(3,1)*dB1_x + K(3,2)*dB2_x + K(3,3)*dB3_x;
            bu_prime = b_prime;
            bv_prime = b_prime;            
            
            b_sq = b^2;
            du_dx = (au_prime*bu - au*bu_prime)/b_sq;
            dv_dx = (av_prime*bv - av*bv_prime)/b_sq;
            A_lin(k:k+1,:) = [du_dx;dv_dx];     
            
            z_meas(k,1) = z(1,i).red_data(1,1);
            z_meas(k+1,1) = z(1,i).red_data(1,2);             
            
            k = k + 2;
        end
        % green blobs
        if (z(1,i).number_green == 1)
            % do measurement estimation
            u = project2_2D(A,Rcw,Tcw,Twp,qwp,object_points(:,2)/1000);
            z_est(k:k+1,1) = u;
            
            % do jacobian calc
            K = A*Rcw;
            X = object_points(1,2)/1000; % convert mapping from pixel/mm to pixel/m
            Y = object_points(2,2)/1000; % convert mapping from pixel/mm to pixel/m
            Z = object_points(3,2)/1000;
            
            % calculate B's
            B1 = (qwp(1)^2+qwp(2)^2-qwp(3)^2-qwp(4)^2)*X + ...
                + 2*(qwp(2)*qwp(3) - qwp(1)*qwp(4))*Y + ...
                + 2*(qwp(2)*qwp(4) + qwp(1)*qwp(3))*Z + ...
                + Twp(1) - z(1,i).cam_param.translation_w2c(1)/1000; % convert mapping from pixel/mm to pixel/m
            B2 = 2*(qwp(2)*qwp(3) + qwp(1)*qwp(4))*X + ...
                + (qwp(1)^2-qwp(2)^2+qwp(3)^2-qwp(4)^2)*Y + ...
                + 2*(qwp(3)*qwp(4) - qwp(1)*qwp(2))*Z + ...
                + Twp(2) - z(1,i).cam_param.translation_w2c(2)/1000; % convert mapping from pixel/mm to pixel/m
            B3 = 2*(qwp(2)*qwp(4) - qwp(1)*qwp(3))*X + ...
                + 2*(qwp(3)*qwp(4) + qwp(1)*qwp(2))*Y + ...
                + (qwp(1)^2-qwp(2)^2-qwp(3)^2+qwp(4)^2)*Z + ...
                + Twp(3) - z(1,i).cam_param.translation_w2c(3)/1000; % convert mapping from pixel/mm to pixel/m            
            
            b = K(3,1)*B1 + K(3,2)*B2 + K(3,3)*B3;
            bu = b;
            bv = b;
            au = K(1,1)*B1 + K(1,2)*B2 + K(1,3)*B3;
            av = K(2,1)*B1 + K(2,2)*B2 + K(2,3)*B3;
                
            dB1_q = [2*(qwp(1)*X - qwp(4)*Y + qwp(3)*Z),2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z),...
                    2*(-qwp(3)*X + qwp(2)*Y + qwp(1)*Z),2*(-qwp(4)*X - qwp(1)*Y + qwp(2)*Z)];
            dB2_q = [2*(qwp(4)*X + qwp(1)*Y - qwp(2)*Z),2*(qwp(3)*X - qwp(2)*Y - qwp(1)*Z),...
                    2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z),2*(qwp(1)*X - qwp(4)*Y + qwp(3)*Z)];
            dB3_q = [2*(-qwp(3)*X + qwp(2)*Y + qwp(1)*Z),2*(qwp(4)*X + qwp(1)*Y - qwp(2)*Z),...
                    2*(-qwp(1)*X + qwp(4)*Y - qwp(3)*Z),2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z)];
            
            dB1_x = [1 0 0 dB1_q];
            dB2_x = [0 1 0 dB2_q];
            dB3_x = [0 0 1 dB3_q];
            
            au_prime = K(1,1)*dB1_x + K(1,2)*dB2_x + K(1,3)*dB3_x;
            av_prime = K(2,1)*dB1_x + K(2,2)*dB2_x + K(2,3)*dB3_x;
            b_prime = K(3,1)*dB1_x + K(3,2)*dB2_x + K(3,3)*dB3_x;
            bu_prime = b_prime;
            bv_prime = b_prime;            
            
            b_sq = b^2;
            du_dx = (au_prime*bu - au*bu_prime)/b_sq;
            dv_dx = (av_prime*bv - av*bv_prime)/b_sq;
            A_lin(k:k+1,:) = [du_dx;dv_dx];
            
            z_meas(k,1) = z(1,i).green_data(1,1);
            z_meas(k+1,1) = z(1,i).green_data(1,2);            
            
            k = k + 2;
        end
        % blue blobs
        if (z(1,i).number_blue == 1)
            u = project2_2D(A,Rcw,Tcw,Twp,qwp,object_points(:,3)/1000);
            z_est(k:k+1,1) = u;
            
            K = A*Rcw;
            X = object_points(1,3)/1000; % convert mapping from pixel/mm to pixel/m
            Y = object_points(2,3)/1000; % convert mapping from pixel/mm to pixel/m
            Z = object_points(3,3)/1000;

            % calculate B's
            B1 = (qwp(1)^2+qwp(2)^2-qwp(3)^2-qwp(4)^2)*X + ...
                + 2*(qwp(2)*qwp(3) - qwp(1)*qwp(4))*Y + ...
                + 2*(qwp(2)*qwp(4) + qwp(1)*qwp(3))*Z + ...
                + Twp(1) - z(1,i).cam_param.translation_w2c(1)/1000; % convert mapping from pixel/mm to pixel/m
            B2 = 2*(qwp(2)*qwp(3) + qwp(1)*qwp(4))*X + ...
                + (qwp(1)^2-qwp(2)^2+qwp(3)^2-qwp(4)^2)*Y + ...
                + 2*(qwp(3)*qwp(4) - qwp(1)*qwp(2))*Z + ...
                + Twp(2) - z(1,i).cam_param.translation_w2c(2)/1000; % convert mapping from pixel/mm to pixel/m
            B3 = 2*(qwp(2)*qwp(4) - qwp(1)*qwp(3))*X + ...
                + 2*(qwp(3)*qwp(4) + qwp(1)*qwp(2))*Y + ...
                + (qwp(1)^2-qwp(2)^2-qwp(3)^2+qwp(4)^2)*Z + ...
                + Twp(3) - z(1,i).cam_param.translation_w2c(3)/1000; % convert mapping from pixel/mm to pixel/m            
            
            b = K(3,1)*B1 + K(3,2)*B2 + K(3,3)*B3;
            bu = b;
            bv = b;
            au = K(1,1)*B1 + K(1,2)*B2 + K(1,3)*B3;
            av = K(2,1)*B1 + K(2,2)*B2 + K(2,3)*B3;
                
            dB1_q = [2*(qwp(1)*X - qwp(4)*Y + qwp(3)*Z),2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z),...
                    2*(-qwp(3)*X + qwp(2)*Y + qwp(1)*Z),2*(-qwp(4)*X - qwp(1)*Y + qwp(2)*Z)];
            dB2_q = [2*(qwp(4)*X + qwp(1)*Y - qwp(2)*Z),2*(qwp(3)*X - qwp(2)*Y - qwp(1)*Z),...
                    2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z),2*(qwp(1)*X - qwp(4)*Y + qwp(3)*Z)];
            dB3_q = [2*(-qwp(3)*X + qwp(2)*Y + qwp(1)*Z),2*(qwp(4)*X + qwp(1)*Y - qwp(2)*Z),...
                    2*(-qwp(1)*X + qwp(4)*Y - qwp(3)*Z),2*(qwp(2)*X + qwp(3)*Y + qwp(4)*Z)];
            
            dB1_x = [1 0 0 dB1_q];
            dB2_x = [0 1 0 dB2_q];
            dB3_x = [0 0 1 dB3_q];
            
            au_prime = K(1,1)*dB1_x + K(1,2)*dB2_x + K(1,3)*dB3_x;
            av_prime = K(2,1)*dB1_x + K(2,2)*dB2_x + K(2,3)*dB3_x;
            b_prime = K(3,1)*dB1_x + K(3,2)*dB2_x + K(3,3)*dB3_x;
            bu_prime = b_prime;
            bv_prime = b_prime;
            
            b_sq = b^2;
            du_dx = (au_prime*bu - au*bu_prime)/b_sq;
            dv_dx = (av_prime*bv - av*bv_prime)/b_sq;
            A_lin(k:k+1,:) = [du_dx;dv_dx];
            
            z_meas(k,1) = z(1,i).blue_data(1,1);
            z_meas(k+1,1) = z(1,i).blue_data(1,2);                        

            k = k + 2;
        end
    end    
    
    b_lin = z_meas - z_est;
    
    [delta_x,norm_err,delta_x_plus_x] = solveLSQ(A_lin,b_lin,x);
    x_est = delta_x_plus_x;
    resnorm = norm_err;
end